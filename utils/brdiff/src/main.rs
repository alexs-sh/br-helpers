mod gitdiff;
mod pkgdiff;
mod pkginfo;
mod show_info;

use log::{debug, error};
use pkginfo::PkgInfos;
use std::io::Error;
use std::path::Path;
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
#[structopt(
    name = "brdiff",
    about = "compare two BR package set. The app uses output generated by the 'show-info' command from Buildroot"
)]
struct Options {
    #[structopt(
        short = "f",
        long = "first",
        default_value = "old",
        about = "first BR config"
    )]
    first_file: String,

    #[structopt(
        short = "s",
        long = "second",
        default_value = "new",
        about = "second BR config"
    )]
    second_file: String,

    #[structopt(
        short = "m",
        long = "mode",
        default_value = "fast",
        about = "diff mode [fast,medium,full]"
    )]
    mode: String,

    #[structopt(
        short = "w",
        long = "workdir",
        default_value = "/tmp/brdiff",
        about = "working directory"
    )]
    workdir: String,

    #[structopt(short = "k", long = "key", about = "SSH key")]
    key: Option<String>,

    #[structopt(
        short = "c",
        long = "clean",
        parse(try_from_str),
        default_value = "false",
        about = "clean working directory before run"
    )]
    clean: bool,

    #[structopt(
        long = "short-history",
        parse(try_from_str),
        default_value = "true",
        about = "short git history"
    )]
    short_history: bool,
}

fn get_info(path: &str) -> Result<PkgInfos, Error> {
    let infos = show_info::read(Path::new(&path))?;
    debug!("read {} packages from {}", infos.len(), path);
    Ok(infos)
}

fn run(opts: Options) -> Result<(), Error> {
    let first = get_info(&opts.first_file)?;
    let second = get_info(&opts.second_file)?;
    let mut diffs = pkgdiff::build(&first, &second);
    if opts.mode == "medium" {
        unimplemented!()
    } else if opts.mode == "full" {
        debug!("try to build full history for {} package(s)", diffs.len());
        let mut diffopts = gitdiff::HistoryBuilderOptions::new(&opts.workdir);
        diffopts.key = opts.key;
        diffopts.clean_workdir = opts.clean;
        diffopts.short_history = opts.short_history;
        gitdiff::append_history(&mut diffs, &diffopts);
    };
    pkgdiff::print_diffs(&diffs);
    Ok(())
}

fn main() {
    env_logger::init();

    let opts = Options::from_args();
    match run(opts) {
        Ok(_) => {
            println!("Done")
        }
        Err(err) => {
            error!("diff fails:{:?}", err)
        }
    }
}
