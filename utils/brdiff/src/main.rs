mod gitdiff;
mod pkgdiff;
mod pkginfo;
mod show_info;

use log::{debug, error};
use pkginfo::PkgInfos;
use std::io::Error;
use std::path::Path;
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
#[structopt(
    name = "brdiff",
    about = "compare two BR package set. The app uses output generated by the 'show-info' command from Buildroot"
)]
struct Options {
    #[structopt(
        short = "f",
        long = "first",
        default_value = "old",
        about = "first BR config"
    )]
    first_file: String,

    #[structopt(
        short = "s",
        long = "second",
        default_value = "new",
        about = "second BR config"
    )]
    second_file: String,

    #[structopt(
        short = "m",
        long = "mode",
        default_value = "fast",
        about = "diff mode [fast,medium,full]"
    )]
    mode: String,

    #[structopt(
        short = "w",
        long = "workdir",
        default_value = "/tmp",
        about = "working directory"
    )]
    workdir: String,

    #[structopt(short = "k", long = "key", about = "SSH key")]
    key: Option<String>,
}

fn get_info(path: &str) -> Result<PkgInfos, Error> {
    let infos = show_info::read(Path::new(&path))?;
    debug!("read {} packages from {}", infos.len(), path);
    Ok(infos)
}

fn run(opts: Options) -> Result<(), Error> {
    let first = get_info(&opts.first_file)?;
    let second = get_info(&opts.second_file)?;
    let diffs = pkgdiff::build(&first, &second);
    debug!("{} diffs", diffs.len());
    if opts.mode == "medium" {
    } else if opts.mode == "full" {
        gitdiff::print_diffs(&opts.workdir, &diffs, true, opts.key);
    } else {
        pkgdiff::print_diffs(&diffs);
    }
    Ok(())
}

fn main() {
    env_logger::init();
    let opts = Options::from_args();
    match run(opts) {
        Ok(_) => {
            println!("Done")
        }
        Err(err) => {
            error!("diff fails:{:?}", err)
        }
    }
}
